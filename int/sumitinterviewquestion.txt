Question:
RTO Management System

Entity: Person
Name
Age
License No
Vehicles
Offenses


Use cases:
getName
getLicenseNo
getVehicles
getOffenses
AddAnOffense
AddAVehicle
DeleteAVehicle
UpdateLicenseNo
getPendingOffences


Answers: Id : SSNo/Adhaar
/getName?userId=AdhaarNo
/getLigetLicenseNo?userId

/addOffense


/deleteVechile?useID=adhaar&vehicleNo=
 —---

Ring central


18 Apr 2024

RC Round 2 | Front end : 
// /////////Output based questions//////////
// /////////Event loop//////////////////////
console.log(0);
setTimeout(() => console.log(1));
new Promise((res) => {
   console.log(2);
   res(false);
})
.then(() => console.log(3))
.catch(() => console.log(4));
console.log(5);
//output ->
0
5
1
2
3
// /////////Output based questions//////////
// ////////Promise Chaining////////////////
Promise.resolve()
   .then(() => 2)  
   .catch(() => 2)
   .then((a) => console.log(a))
   .then((b) => console.log(b))
   .then(() => {
     throw new Error();
   })
   .catch(() => 1)
   .then((c) => console.log(c)); 
//output ->
2
undefined
// /////////Output based questions//////////
// //////////////////////Event Propogation////////////////////
outerDiv ->
  		innerDiv ->
						button
const outerDiv = document.getElementById("outer");
const innerDiv = document.getElementById("inner");
outerDiv.addEventListener("click", () => console.log("outerDiv -> bubble"));
outerDiv.addEventListener("click", () => console.log("outerDiv -> capture"), {
   capture: true,
});
outerDiv.addEventListener("click", () => console.log("outerDiv -> bubble 2"));
innerDiv.addEventListener("click", () => console.log("innerDiv -> bubble"));
innerDiv.addEventListener("click", () => console.log("innerDiv -> capture"), {
   capture: true,
})
// 
"innerDiv -> capture"
//////////////////

Q2 Make polyfill for Promise.All 
const prom1 = new Promise(res => {setTimeout(() => res(1), 1000)})
const prom2 = Promise.reject(2);
function promise_all( arr ) {
	
  return new Promise( (res, rej) =>{
		if(!arr && arr.length<1) rej("Not valid input");
    
    const resultArr = [];
    let counter = 0;
    for(let i=0; i<arr.length; i++) {
    	arr[i].then(data=>{
      	resultArr[i] = data;
        counter++;
        if(counter===arr.length){
        	res(resultArr);
        }
      }).catch(err=>{
      	rej(err);
      });
    }
  });
}
promise_all([prom1, prom2]).then(data=>console.log(data)).catch(err=> console.log(err));
Question 2 : - 
const prom1 = new Promise(res => {setTimeout(() => res(1), 1000)})
const prom2 = Promise.reject(2);
function promise_all( arr ) {
	
  return new Promise( (res, rej) =>{
		if(!arr && arr.length<1) rej("Not valid input");
    
    const resultArr = [];
    let counter = 0;
    for(let i=0; i<arr.length; i++) {
    	arr[i].then(data=>{
      	resultArr[i] = data;
        counter++;
        if(counter===arr.length){
        	res(resultArr);
        }
      }).catch(err=>{
      	rej(err);
      });
    }
  });
}
promise_all([prom1, prom2]).then(data=>console.log(data)).catch(err=> console.log(err));




3rd Round 


Two Persons:

Given a live application : a car listing web app with a form to add new car
1. Questions around the form what can be added what needs to improved

2. live coding to add validation in form



4th round
With Directors 
Deep dive in one of the project 
Team structure 
How to resolve conflicts
Challenges faced
Project you are proud of

—--------------


FYND mumbai 
Rnd 1 | Frontend
18/06/2024

/* 
1. Why we have virtual dom
1.1 Can we have multiple root notes or React injected in multiple nodes
1.2 how server side rendering works
1.3 can we have server side as well as client side rendered component in our application
1.4 how to achieve it server side as well as client side rendered
2. Is javascript asynchronous or synchronous
3. what is component should update
4. detailed discussion on React internal working
5. How javascript handles asynchronous nature, what is event loop.
6. useRef vs createRef, useEffect, how to access state of component
6.1 is useState sync or async
If async how it it knows the variable
7. Difference between hydrate and render
8. How can we modify a child property without rendering a parent
 */

//  write a blocker code
async function blocker() {
  try {
    const promise = new Promise((res, rej) => {
      console.log("blocked");
      setTimeout(() => {
        res("value");
      }, 1000);
    });
    const val = await promise;  // Await the promise to get the resolved value
    console.log("unblocked");
    console.log(val);  // Uncomment this to log the resolved value
  } catch (err) {
    console.log("someerror");
    console.log(err);
  }
}
blocker(); 

//Output of following
const per1 = function(n){this.name = n};
const per2 = (n) => {this.name = n};
console.log(new per1("abx"));
console.log(new per2("xyz"));



// Output of following

console.log(1);
setTimeout(()=>{console.log(2)});
new Promise(res=>res()).then(()=>{
  console.log(3);
});
console.log(4);
—----------------------


/1. You have a large text file containing words. Given any two words, find the shortest distance (in terms of number of words) between them in the file.
//**Input: S=**“the quick brown fox jumps over the lazy dog”, word1=”the”, word2=”lazy”
const findMinDistance = (str, word1, word2) => {
  if(str.length<=0){
    return -1;
  }
  if(!word1 || !word2 || word1.length<1 || word2.length<1) return -1;
  
  const wordArr = str.split(" ");
  const len = wordArr.length;
   let minDist = Infinity;
  let p1=-1;
  let p2=-1;
  
  // single loop on array
  for(let i=0; i<len; i++){
   	const word = wordArr[i];
    if(word === word1){
    	p1 = i;
    }
    
    if(word === word2){
    	p2 = i;
    }
    if(p1!=-1 && p2!=-1){
    	minDist = Math.min(minDist, Math.abs(p1-p2));
    }
  }
  return minDist;
}
console.log(findMinDistance("the quick brown fox jumps over the and lazy the dog", "lazy", "the"));

—---------------\

1. Max sum subarray lc#53 medium

Walmart 1st rnd DS Algo (Again confusion) 
1. Question on onDocumentLoad and documentContent Loaded
2. React server side rendering will useEffect work
3. useMemo and useEffect which will be called first.
4. What is XSS && How to stop XSS
6. Create a calculator with + -/ * functionality couldn’t implement


—---------------
Finding the intersection of two arrays of integers.
Let’s consider:
- A, an array of size n
- B, an array of size m
Example:
A : [ 4, 71, 8, 2, 12, 5, 23, 45, 20, … ]
B| : [ 67, 3, 23, 20, 6, 31, 7, 9, 71, … ]
// After sorting 
A:[2, 4, 5, 8 …]
B: [3, 6, 9….]


A: [1,4,5,6,8,9,12]
B: [2,3,4,5,6,7,9]
No duplicate values
Expected Result:
C : [ 71, 23, 20, … ]


Nxn n2



Const getTheIntersetion = (arr1, arr2) => {

	if(!arr1|| arr1.length<1 || !arr2 || arr2.length<1){
		Return [];
	}

	Const result = [];

Const m = arr1.length;
Const n = arr2.length;

	arr1.sort();
	arr2.sort();

Const p1=0, p2 =0;

	while(p1<m && p2<n){
		if( arr1[p1]===arr2[p2]){
			result.push(arr1[p1]);
			p1++;
p2++;
}else if(arr1[p1]<arr2[p2]){
p1++;	
}else{
		p2++;
}

}
// left out array at end
if(p1<m) {
	   	for(let i = p1; i<m; i++){
			if(arr2[n-1]==arr1[p1]){
				result.push(arr1[p1])
			}
		}

            }

if(p1<m) {
	   	for(let i = p1; i<m; i++){
			if(arr2[n-1]==arr1[p1]){
				result.push(arr1[p1])
			}
		}

            }


Return result;


}


—-------------

Ninja kart : 












// "Given data Which Represents The Stock Price Of That Day,
// If You Can Perform Only One Transaction In A Day I.e To Buy Once & Sell Once.
// Find The Maximum Possible Profit.
// Input test case:
// prices = [7,1,5,3,6,4]
// Stock Prices for Company XYZ
// day    price
// 1           7
// 2          1
// 3          5
// 4          3
// 5          6
// 6          4
// Output:
// buy = 1, day2
// sell =  6,  day5
// profit = 5"




// "Given arrival and departure times of all trains that reach a railway station,
// the task is to find the minimum number of platforms required for the railway station so that no train waits.
// Input: arr[] = {9:00, 9:40, 9:50, 11:00, 15:00, 18:00}
// dep[] = {9:10, 12:00, 11:20, 11:30, 19:00, 20:00}


//plat[1200, 1120]
// Output: 3
// Explanation: There are at-most three trains at a time (time between 9:40 to 12:00)


// Input: arr[] = {9:00, 9:40}
// dep[] = {9:10, 12:00}
// Output: 1
// Explanation: Only one platform is needed. "


(function main() {
 const readline = require("readline");
 const r1 = readline.createInterface({
   input: process.stdin,
   output: process.stdout,
 });
  var solution = function(s) {
     var profit = 0;
     if(s.length<1){
         return -1;
     }


     for(i=0; i < s.length-1; i++){
       for(j=i+1; j < s.length; j++){
           if((s[j]-s[i])>profit){
               sellIndx = j;
               profit = s[j]-s[i];
           }
       }
     }
      return profit;
 };
  var solution2 = function(arr, dep) {
   var plat = [];
   console.log('start --> s2');
   plat.push(dep[0]);
   for(i=1; i < arr.length; i++){


       var indx = findIndx(plat, arr[i]);
       console.log('indx --> s2 ', indx);
       if(indx>-1){
           plat.push(dep[i]);
       } else {
           plat[indx] = dep[i];
       }
   }
    
   return plat.length;
 };


  var n, k;
 r1.on("line", (input) => {
   n = input;
 }).on("close", () => {


   var arr = [900, 940, 950, 1100, 1500, 1800];
   var dep = [910, 1200, 1120, 1130, 1900, 2000]
   console.log(solution2(arr, dep));
   //console.log(solution(n));
 });
})();



—-----

Blue yonder

First round failed badly no question done

Question
Rearrange numbers in an array such that no two adjacent numbers are same		
Given an array of integers. The task is to rearrange elements of the array such that no two adjacent elements in the array are same.
Examples:  
Input: arr[] = {1, 1, 1, 2, 2, 2}
Output: {2, 1, 2, 1, 2, 1}
Input: arr[] = {1, 1, 1, 1, 2, 2, 3, 3}
Output: {1, 3, 1, 3, 2, 1, 2, 1}


write a mongo db query :-

write  a react program for same :-
{
_id: 1,
student: "Maya",
homework: [ 10, 5, 10 ],
quiz: [ 10, 8 ],
extraCredit: 0
}
{
_id: 2,
student: "Ryan",
homework: [ 5, 6, 5 ],
quiz: [ 8, 8 ],
extraCredit: 8
}
{
"_id" : 1,
"student" : "Maya",
"homework" : [ 10, 5, 10 ],
"quiz" : [ 10, 8 ],
"extraCredit" : 0,
"totalHomework" : 25,
"totalQuiz" : 18,
"totalScore" : 43
}
{
"_id" : 2,
"student" : "Ryan",
"homework" : [ 5, 6, 5 ],
"quiz" : [ 8, 8 ],
"extraCredit" : 8,
"totalHomework" : 16,
"totalQuiz" : 16,
"totalScore" : 40
}



 const arr = [
   {
     _id: 1,
     student: 'Maya',
     homework: [10, 5, 10],
     quiz: [10, 8],
     extraCredit: 0,
   },
   {
     _id: 2,
     student: 'Ryan',
     homework: [5, 6, 5],
     quiz: [8, 8],
     extraCredit: 8,
   },
 ];





import React from 'react';
import './style.css';


export default function App() {
 const arr = [
   {
     _id: 1,
     student: 'Maya',
     homework: [10, 5, 10],
     quiz: [10, 8],
     extraCredit: 0,
   },
   {
     _id: 2,
     student: 'Ryan',
     homework: [5, 6, 5],
     quiz: [8, 8],
     extraCredit: 8,
   },
 ];


 const getCountAndClass = (arr) => {
   let sum = 0;
   let isRedClass = false;
   if (arr && arr.length) {
     for (let a = 0; a < arr.length; a++) {
       if (arr[a] < 7) {
         isRedClass = true;
       }
       sum += arr[a];
       console.log(sum);
     }
   }
   return { sum, isRedClass };
 };


 const getMarks = ({ sum: marks, isRedClass }) => {
   return (
     <p
       class={isRedClass ? 'red' : 'green'}
       style={{ backgroundColor: `${isRedClass ? 'red' : 'green'}` }}
     >
       {marks}
     </p>
   );
 };


 const getCell = (item) => {
   const homeWork = getCountAndClass(item.homework);
   const quizMark = getCountAndClass(item.quiz);
   return (
     <tr style={{ border: '3px solid rgb(0, 0, 0)' }}>
       <tr>
         <td>id </td> <td>{item._id}</td>
       </tr>
       <tr>
         <td>Homework Mark</td> <td>{getMarks(homeWork)}</td>
       </tr>
       <tr>
         <td>Quiz Mark</td> <td>{getMarks(quizMark)}</td>
       </tr>
     </tr>
   );
 };


 return (
   <div>
     <table style={{ border: '3px solid rgb(0, 0, 0)' }}>
       {arr.map((item) => getCell(item))}
     </table>
   </div>
 );
}



—------------

Cricket Score Calculation
We are given a ball-by-ball cricket score. Dravid and Sachin are the 2 batsmen playing. Dravid bats the first ball. We have to calculate the total score of both players.
Note: After odd runs, strike changes, and other player gets to bat. After 6 balls also strike changes. Assume there aren’t any wide/no balls or wickets taken.

Example Input array : 
[ 1, 2, 4, 1, 3, 1, 1, 4, 6, 0, 0, 1, 1, 1, 2, 1, 0, 6, 0, 0, 1, 2, 1, 0, 0, 4, 0, 1, 0 ]

Example output
Dravid: 20
Sachin: 24

//code

let arr = [1, 2, 4, 1, 3, 1, 1, 4, 6, 0, 0, 1, 1, 1, 2, 1, 0, 6, 0, 0, 1, 2, 1, 0, 0, 4, 0, 1, 0 ];

let calculateRuns = (arr, player1, player2)=>{

  let runsP1 = 0;
  let runsP2 = 0;  

  let strikeOne = true;

  //for loop to trverse the array
  for(let i=0; i<arr.length; i++){
    if(strikeOne){
      runsP1 += arr[i];
    }else{
      runsP2 += arr[i];
    }

    if(arr[i]%2 !== 0){
      strikeOne = !strikeOne;
    }
    if((i+1)%6===0){  
      strikeOne = !strikeOne;  
    }
  }
  console.log(`${player1} runs : ${runsP1}`);
  console.log(`${player2} runs : ${runsP2}`);
}
calculateRuns(arr, "Dravid", "Sachin");
2. Write a program to implement pow(a,b) without loops

let pow = (a, b) =>{

    if (b<1){
        return 1; 
    }
    return a*pow(a,b-1); 
}

pow(3,3);




 3. Given 2 sorted array of unique integers, find the common numbers in these 2 arrays. Use the most efficient approach. 
Example Input : [ 2, 3, 4, 5, 7, 8, 10, 12 ] , [ 1, 2, 3, 6, 12 ]
Example Output : [2, 3, 12]

findCommon([ 2, 3, 4, 5, 7, 8, 10, 12 ] , [ 1, 2, 3, 6, 12 ]);

function findCommon(arr1, arr2){
    let i1 = 0;
    let i2 = 0;

    let retArr = [];

    while(i1< arr1.length && i2< arr2.length){
        if(arr1[i1]===arr2[i2]){
            retArr.push(arr1[i1]);
            i1++;
            i2++;
        }else{
           if(arr1[i1]>arr2[i2]) {
              i2++; 
           } else{
              i1++
           }
        }
    }

    return retArr;
}

findCommon([ 2, 3, 4, 5, 7, 8, 10, 12 ] , [ 1, 2, 3, 6, 12 ]);








—---------

1st round 
Basic question on nodejs

Event loop
Buffer
Streams (types of stream)

MongoDB



System Design:

1. Draw a weather application 
User pass longitude latitude and the get weather info:
System handles a billion request per minute
Present for all geolocations 
Data is collected via edge devices

Follow up 
1.Which cache to use
Which database 
How the API gateway will handle the request coming from all over the world 
(not knowing AWS provides DNS based routing)

Using edge devices id we can make entry


How index work
In sql make index

In mongo how to index non primary key values
Classes in s3
Lamda AWS
Why ec2 instance 


